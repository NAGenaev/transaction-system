# orchestrator/orchestra.py
import asyncio
import json
from collections import defaultdict, deque

from common.kafka import get_kafka_consumer, get_kafka_producer

import pyfiglet

ascii_banner = pyfiglet.figlet_format("TTTS ORCHESTRATOR 0.0.3", font="slant")
print(ascii_banner)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤
TOPIC_API_TO_ORCH = "transaction-events"
TOPIC_ORCH_TO_WORKER = "validated-transactions"

# –û—á–µ—Ä–µ–¥–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
account_queues = defaultdict(deque)
active_accounts = set()

async def fraud_check(tx: dict) -> bool:
    # –ó–∞–≥–ª—É—à–∫–∞: –≤—Å–µ–≥–¥–∞ "–æ–¥–æ–±—Ä—è–µ—Ç"
    await asyncio.sleep(0.01)
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–†–û–î DONE! {tx}")
    return True

async def coordinate_with_external_service(tx: dict) -> bool:
    # –ó–∞–≥–ª—É—à–∫–∞: –≤—Å–µ–≥–¥–∞ "–æ–¥–æ–±—Ä—è–µ—Ç"
    await asyncio.sleep(0.01)
    print(f"‚úÖ TTTS Approved {tx} DONE!")
    return True

async def handle_transaction(tx: dict, producer):
    sender_account = tx["sender_account"]

    try:
        # 1. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (–≤ –±—É–¥—É—â–µ–º ‚Äî –∑–∞–ø—Ä–æ—Å –≤ –ë–î)
        print(f"üîí –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è sender_account {sender_account}")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ—Ä–æ–¥
        if not await fraud_check(tx):
            print(f"‚ùå –§—Ä–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {tx}")
            return

        # 3. –í–Ω–µ—à–Ω–µ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
        if not await coordinate_with_external_service(tx):
            print(f"‚ùå –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {tx}")
            return

        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ validated-transactions
        await producer.send_and_wait(TOPIC_ORCH_TO_WORKER, json.dumps(tx).encode("utf-8"))
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ worker (topic:transaction-processed): {tx}")
        print(f"üì¶ Orchestrator ‚Üí worker: {tx}")

    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤ –æ—á–µ—Ä–µ–¥–∏
        queue = account_queues[sender_account]
        if queue:
            next_tx = queue.popleft()
            asyncio.create_task(handle_transaction(next_tx, producer))
        else:
            active_accounts.remove(sender_account)

async def orchestrate():
    consumer = await get_kafka_consumer(topic=TOPIC_API_TO_ORCH)
    producer = await get_kafka_producer()

    try:
        async for msg in consumer:
            tx = json.loads(msg.value)
            sender_account = tx["sender_account"]

            if sender_account in active_accounts:
                account_queues[sender_account].append(tx)
                print(f"‚è≥ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è sender_account {sender_account}: {tx}")
            else:
                active_accounts.add(sender_account)
                asyncio.create_task(handle_transaction(tx, producer))

    finally:
        await consumer.stop()
        await producer.stop()

if __name__ == "__main__":
    asyncio.run(orchestrate())
