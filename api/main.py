from pydantic import BaseModel, field_validator, FieldValidationInfo
import uuid
import asyncio
import logging
import pyfiglet
from fastapi import FastAPI, HTTPException
from prometheus_fastapi_instrumentator import Instrumentator
from prometheus_client import Counter
from common.kafka import get_kafka_producer
from common.constants import TOPIC_API_TO_ORCH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

logger = logging.getLogger("api")

# –ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
ascii_banner = pyfiglet.figlet_format("TTTS API 0.0.3", font="slant")
print(ascii_banner)

# –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
api_requests_total = Counter("api_requests_total", "Total API transaction requests")
api_requests_failed = Counter("api_requests_failed", "API transaction failures")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI()
Instrumentator().instrument(app).expose(app)

# –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
class Transaction(BaseModel):
    sender_account: str
    receiver_account: str
    amount: float
    transaction_id: str = None

# –§–õ–ö –Ω–∞ –ê–ü–ò
    @field_validator("receiver_account", "sender_account")
    @classmethod
    def validate_account_length(cls, v: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—á–µ—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤)"""
        if len(v) != 17:
            logger.error(f"–§–õ–ö: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—á—ë—Ç–∞: {v}")
            raise ValueError("–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 17 —Å–∏–º–≤–æ–ª–æ–≤")
        return v

    @field_validator("receiver_account")
    @classmethod
    def validate_receiver_account(cls, v: str, info: FieldValidationInfo) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª–∏"""
        sender_account = info.data.get('sender_account')
        if sender_account and v == sender_account:
            logger.error(f"–§–õ–ö: –°—á–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {v} == {sender_account}")
            raise ValueError("–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º —Å—á—ë—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
        return v

    @field_validator("sender_account")
    @classmethod
    def validate_sender_account(cls, v: str, info: FieldValidationInfo) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–ª–∏"""
        receiver_account = info.data.get('receiver_account')
        if receiver_account and v == receiver_account:
            logger.error(f"–§–õ–ö: –°—á–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {v} == {receiver_account}")
            raise ValueError("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º —Å—á—ë—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        return v
        
# –°–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    app.state.producer = await get_kafka_producer()

@app.on_event("shutdown")
async def shutdown_event():
    await app.state.producer.stop()

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
@app.get("/healthz")
async def health_check():
    return {"status": "ok"}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@app.post("/transactions/")
async def create_transaction(tx: Transaction):
    api_requests_total.inc()

    # –ï—Å–ª–∏ transaction_id –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if not tx.transaction_id:
        tx.transaction_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ JSON –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        message = tx.json().encode("utf-8")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Kafka —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.wait_for(
            app.state.producer.send_and_wait(TOPIC_API_TO_ORCH, message),
            timeout=2.0  # ‚è± –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        logger.info(f"üì¶ API ‚Üí Orchestrator: {tx}")
        return {"status": "queued", "transaction_id": tx.transaction_id}
    
    except asyncio.TimeoutError:
        api_requests_failed.inc()
        logger.error(f"‚è± Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Kafka: {tx}")
        raise HTTPException(status_code=504, detail="Kafka timeout")
    except Exception as e:
        api_requests_failed.inc()
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Kafka: {e}")
        raise HTTPException(status_code=500, detail="Kafka send failed")