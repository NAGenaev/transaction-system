//–Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞: 1000
import http from 'k6/http';
import { check, sleep } from 'k6';

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª —Å—á–µ—Ç–æ–≤
const accountPool = Array.from({length: 1000}, (_, i) => 
    (40817810111322211n + BigInt(i)).toString()
);

const totalTransactions = 2_000_000;
const vus = 200;

export const options = {
  scenarios: {
    repeated_transfers: {
      executor: 'per-vu-iterations',
      vus: vus,
      iterations: totalTransactions / vus,
      maxDuration: '120m',
    },
  },
  thresholds: {
    'http_req_duration': ['p(95)<1000'],
    'http_req_failed': ['rate<0.01'],
  },
  discardResponseBodies: true,
};

export default function () {
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
  const senderIndex = Math.floor(Math.random() * accountPool.length);
  let receiverIndex;
  
  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  do {
    receiverIndex = Math.floor(Math.random() * accountPool.length);
  } while (receiverIndex === senderIndex);

  const sender = accountPool[senderIndex];
  const receiver = accountPool[receiverIndex];
  const amount = 1;

  const payload = JSON.stringify({
    sender_account: sender,
    receiver_account: receiver,
    amount: amount,
  });

  const res = http.post('http://localhost:8000/transactions/', payload, {
    headers: { 'Content-Type': 'application/json' },
    timeout: '30s',
  });

  check(res, {
    'üì¶ —Å—Ç–∞—Ç—É—Å 200': (r) => r.status === 200,
  });

  if (res.status !== 200) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${res.status} ‚Üí ${payload}`);
  }

  sleep(0.001);
}