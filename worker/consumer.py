# worker/consumer.py
import asyncio
import json
from common.kafka import get_kafka_consumer
from common.db import db
from datetime import datetime
import pyfiglet

ascii_banner = pyfiglet.figlet_format("TTTS WORKER 0.0.3", font="slant")
print(ascii_banner)

async def process_transaction(tx: dict):
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx}")
    sender_account = str(tx["sender_account"])
    receiver_account = str(tx["receiver_account"])
    amount = tx["amount"]

    try:
        async with db.pool.acquire() as conn:
            async with conn.transaction():
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–∫–∏
                sender = await conn.fetchrow("SELECT balance FROM accounts WHERE account_number = $1 FOR UPDATE", sender_account)
                receiver = await conn.fetchrow("SELECT balance FROM accounts WHERE account_number = $1 FOR UPDATE", receiver_account)

                if sender is None or receiver is None:
                    print("‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                if sender["balance"] < amount:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_account} {sender['balance']} < {amount}")
                    return

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
                await conn.execute("UPDATE accounts SET balance = balance - $1 WHERE account_number = $2", amount, sender_account)
                await conn.execute("UPDATE accounts SET balance = balance + $1 WHERE account_number = $2", amount, receiver_account)

                # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                timestamp = datetime.utcnow()
                tx_id = await conn.fetchrow("""
                    INSERT INTO transactions (sender_account, receiver_account, amount, timestamp)
                    VALUES ($1, $2, $3, $4) RETURNING id
                """, sender_account, receiver_account, amount, timestamp)

                #print(f"üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: {tx_id}")
                print(f"üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î: ID={tx_id['id']}, FROM={sender_account}, TO={receiver_account}, AMOUNT={amount}, TIME={timestamp}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

async def consume():
    await db.init()
    print("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    consumer = await get_kafka_consumer("validated-transactions", group_id="worker-group")
    try:
        async for msg in consumer:
            tx = json.loads(msg.value)
            await process_transaction(tx)
    finally:
        await consumer.stop()
        await db.close()

if __name__ == "__main__":
    asyncio.run(consume())